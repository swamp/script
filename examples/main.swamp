/// This is a doc comment

// Primitive types and literals
int_val = 42
float_val = 3.14
string_val = "normal string"
interpolated = 'value is {int_val}'
bool_val = true
unit_val = ()

// Arrays
numbers = [1, 2, 3, 4, 5]
first = numbers[0]

// Tuples
point = (10, "hello", 3.14)


// Struct definition
struct Vector2 {
    x: Float,
    y: Float,
}

// Implementation block
impl Vector2 {
    fn sqr_len(self) -> Float {
        self.x * self.x + self.y * self.y
    }

    fn scale(mut self, factor: Float) -> Vector2 {
        self.x = self.x * factor
        self.y = self.y * factor
        self
    }

    fn new(x: Float, y: Float) -> Vector2 {
        Vector2 { x: x, y: y }
    }
}

type Position = (Float, Float)

fn new_position(x: Float, y: Float) -> Position {
    ( x, y )
}


// Enum
enum Shape {
    Circle(Float),
    Rectangle { width: Float, height: Float },
    Point,
}


// Function definition
fn calculate_area(shape: Shape) -> Float {
    match shape {
        Circle radius => 3.14 * radius * radius,
        Rectangle width, height => width * height,
        Point => 0.0,
    }
}


// Loops
mut sum = 0
for i in 0..5 {
    sum = sum + i
}
print('loop sum: {sum}') // loops 0 to 4, so result is 10. (0, 1, 1+2, 3+3, 6+4)


mut counter = 0
while counter < 8 {
    if counter == 2 {
        counter = counter + 1
        print('I continued at {counter}') // Should be 3
        continue
    }
    if counter == 4 {
        break
    }
    counter = counter + 1
}
print('counter after while is: {counter}') // Should be 4


struct Player {
    name: String,
    health: Int,
    position: Vector2
}

player = Player {
    name: "Hero",
    health: 100,
    position: Vector2::new(10.0, 20.0)
}
print('player:{player}')

position = new_position(10.0, 20.0)
print('position type alias: {position}')


// Pattern matching with multiple patterns
status = match player.health {
    100 => "Full health",
    health => 'Critical: {health}'
}
print('status:{status}')


/// Attempts to find a player by their name
/// Returns: Some(Player) if found, none otherwise
fn find_player_by_name(name: String) -> Player? {
    if name == "Hero" {
        Player {
            name: "Hero",
            health: 100,
            position: Vector2::new(-13.0, -46.0)
        }
    } else {
        none
    }
}

/// Gets a player's health if they exist and are alive
/// Returns: Some(Int) if player exists and health > 0, none otherwise
fn get_health_if_alive(player: Player?) -> Int? {
    if player? {
        // We can use player directly here since it was unwrapped
        if player.health > 0 {
            player.health  // Automatically converts to Some(player.health)
        } else {
            none
        }
    } else {
        none
    }
}

// Basic optional handling
hero_player = find_player_by_name("Hero")
if hero_player? {  
    // hero_player is automatically unwrapped in this scope
    print('Found player at position: {hero_player.position}')
}

// Optional unwrapping with assignment
if found_player = find_player_by_name("Hero")? {
    // found_player contains the unwrapped Player instance
    print('Found player {found_player.name} with health: {found_player.health}')
}

// Chaining optional operations

/* Not working yet

if health = get_health_if_alive(find_player_by_name("Hero"))? {
    print('Player is alive with health: {health}')
} else {
    print('Player not found or not alive')
}

*/

shapes = [
    Shape::Circle(5.0),
    Shape::Rectangle { width: 10.0, height: 20.0 },
    Shape::Point
]
print('area:{calculate_area(shapes[1])}') // Should be 200

mut vec = Vector2 { x: 1.0, y: 2.0 }
length = vec.scale(2.0).sqr_len()  // 2*2 + 4*4 = 20

print('Final sqr-length: {length}') // 20

// Return the last expression
length

// Expected output
//
// loop sum: 10
// I continued at 3
// counter after while is: 4
// player:Player { name: Hero, health: 100, position: Vector2 { x: 10.00, y: 20.00 } }
// position type alias: (10.00, 20.00)
// status:Full health
// Found player at position: Vector2 { x: -13.00, y: -46.00 }
// Found player "Hero" with health: 100
// area:200.00
// Final sqr-length: 20.00
// 20.00
