WHITESPACE = _{ space | block_comment | line_comment }

space = _{ " " | "\t" | NEWLINE }
line_comment = _{ "//" ~  (!NEWLINE ~ ANY)* ~ NEWLINE }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

program = { SOI ~ (definition | expression)* ~ EOI }

doc_comment = @{ "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

definition = {
    doc_comment* ~
    (
    import_definition
    | struct_def
    | enum_def
    | function_def
    | impl_def
    | trait_def
    )
}

trait_def = {
    "trait" ~ type_identifier ~ "{" ~ impl_item* ~ "}"
}


impl_def = {
    "impl" ~ type_identifier ~ "{" ~ impl_item* ~ "}"
}


impl_item = { normal_member_function | external_member_function }


// Self parameter can be mut or not
self_identifier = { "self" }

self_parameter = {
    mut_keyword? ~ self_identifier
}

// Struct destructuring
struct_destructure = { "{" ~ identifier ~ ("," ~ " "* ~ identifier)* ~ "}" }  // PEST BUG: need explicit spaces after comma

// Tuple destructuring
tuple_destructure = { "(" ~ identifier ~ ("," ~ " "* ~ identifier)* ~ ")" }  // PEST BUG: need explicit spaces after comma

// Struct definition
trailing_comma = _{ "," }


struct_def = { "struct" ~ type_identifier ~ "{" ~ field_definitions? ~ trailing_comma? ~ "}" }

// Update enum rules to handle variants properly
enum_def = { "enum" ~ type_identifier ~ "{" ~ enum_variants? ~ "}" }

enum_variants = { enum_variant ~ ("," ~ enum_variant)* ~ ","? }


enum_variant = {
    struct_variant  // Struct variant must come first
    | tuple_variant  // Then tuple variant
    | simple_variant // Simple variant must come last
}

simple_variant = { type_identifier }
tuple_variant = { type_identifier ~ "(" ~ type_name ~ ("," ~ type_name)* ~ ")" }
struct_variant = { type_identifier ~ "{" ~ struct_type_field ~ ("," ~ struct_type_field)* ~ trailing_comma? ~ "}" }

field_definitions = { (field_def ~ ("," ~ field_def)*)? }

field_def = { identifier ~ ":" ~ type_name }

function_signature = {
    "fn" ~ identifier ~ "(" ~ (parameter_list ~ ","?)? ~ ")" ~ return_type?
}

member_signature = {
     "fn" ~ identifier ~ "(" ~ (self_parameter ~ ("," ~ parameter_list)? | parameter_list)? ~ ")" ~ return_type?
}

external_function = {
    "external" ~ function_signature
}

normal_function = {
    function_signature ~ expression
}


member_def = {
    external_member_function |
    normal_member_function
}


external_member_function = {
    "external" ~ member_signature
}

normal_member_function = {
    member_signature ~ expression
}


function_def = {
    external_function |
    normal_function
}

parameter_list = { parameter ~ ("," ~ " "* ~ parameter)* }  // PEST BUG: need explicit spaces after comma

parameter = { mut_keyword? ~ identifier ~ ":" ~ type_name }
mut_keyword = { "mut" }

return_type = { "->" ~ type_name }


for_loop = { "for" ~ for_pattern ~ "in" ~ mut_keyword? ~ expression ~ expression }


mut_identifier = { mut_keyword? ~ identifier }
for_pattern = { for_pair | mut_identifier }
for_pair = { mut_identifier ~ "," ~ mut_identifier }

while_loop = { "while" ~ expression ~ expression }

import_definition = {
    "use" ~
        import_path ~ ("{" ~ import_list ~ "}")?
}

import_path = { identifier ~ ("." ~ identifier)* }

import_list = {
    import_list_item ~ ("," ~ import_list_item)* ~ ","?
}

import_list_item = { type_identifier | identifier }

return_expr = { "return" ~ expression }
continue_expr = { "continue" }
break_expr = { "break" }


expression = { assignment_expression | logical }

assignment_expression = {
    multi_var_assignment
    | single_lhs_assignment
}

multi_var_assignment = {
    mut_keyword? ~ multi_variable_list ~ "=" ~ expression
}

multi_variable_list = {
    variable_item ~ ("," ~ variable_item)+
}

single_lhs_assignment = {
    mut_keyword? ~ postfix ~ (assign_op | compound_assign_op) ~ expression
}

// Operators
assign_op = { "=" }

compound_assign_op = {
    add_assign_op
    | sub_assign_op
    | mul_assign_op
    | div_assign_op
}

add_assign_op = { "+=" }
sub_assign_op = { "-=" }
mul_assign_op = { "*=" }
div_assign_op = { "/=" }


// OPERATORS ------------------------------------------------------------

// Logical operators (lowest precedence)
logical = { comparison ~ ((op_and | op_or) ~ comparison)* }

// Comparison operators
comparison = { addition ~ ((op_lte | op_gte | op_eq | op_neq | op_lt | op_gt ) ~ addition)* }

// Addition and subtraction
addition = { multiplication ~ ((op_add | op_sub | range_op) ~ multiplication)* }

// Multiplication and division (highest precedence for binary ops)
multiplication = { prefix ~ ((op_mul | op_div | op_mod) ~ prefix)* }


// Prefix operators
prefix = { prefix_op* ~ postfix }
prefix_op = { op_not | op_neg }

array_suffix = { "[" ~ expression ~ "]" }

method_or_field_suffix = {
    "." ~ identifier ~ function_call_args?
}
function_call_args = {
    "(" ~ (function_argument ~ ("," ~ " "* ~ function_argument)*)? ~ ")"
}

postfix = { primary ~ postfix_op* }
postfix_op = {
    option_operator
    | array_suffix
    | method_or_field_suffix
}
option_operator = { "?" }

// Add range_op to infix operators
infix_op = { range_op | op_or | op_and | op_eq | op_neq | op_lt | op_gt | op_lte | op_gte | op_add | op_sub | op_mul | op_div }

// Define range operator
range_op = { ".." }

// Operator definitions as rules
op_or = { "||" }
op_and = { "&&" }
op_eq = { "==" }
op_neq = { "!=" }
op_lt = { "<" }
op_gt = { ">" }
op_lte = { "<=" }
op_gte = { ">=" }
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_not = { "!" }
op_neg = { "-" }
op_mod = { "%" }


// Basics ----------------------------------------------------------------

identifier = @{
    (ASCII_ALPHA_LOWER | "_") ~
    (ASCII_ALPHA_LOWER | ASCII_DIGIT | "_")* ~
    !(ASCII_ALPHA_UPPER)
}

// Type identifiers must have CamelCase
type_identifier = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }

constant_identifier = @{
    "_"? ~ ASCII_ALPHA_UPPER ~
    (ASCII_ALPHA_UPPER | ASCII_DIGIT | "_")* ~
    !(ASCII_ALPHA_LOWER)
}


// EXPRESSIONS ------------------------------------------------------------
variable = { identifier }

argument_list = { expression ~ ("," ~ " "* ~ expression)* }  // PEST BUG: need explicit spaces after comma
parenthesized = { "(" ~ expression ~ ")" }

function_argument = {
    mut_keyword? ~ expression
}

function_call = {
     qualified_identifier ~ "(" ~ (function_argument ~ ("," ~ " "* ~ function_argument)*)? ~ ")" // PEST BUG: need to be explicit about spaces after ,
}

static_call = {
    qualified_type_identifier ~ "::" ~ identifier ~
    "(" ~ (function_argument ~ ("," ~ " "* ~ function_argument)*)? ~ ")"
}

array_index = { "[" ~ expression ~ "]" }


primary = {
    if_expr
    | match_expr
    | for_loop
    | while_loop
    | return_expr
    | break_expr
    | continue_expr
    | block
    | interpolated_string
    | enum_literal
    | static_call
    | function_call
    | struct_instantiation
    | parenthesized
    | literal
    | array_literal
    | map_literal
    | variable
}



identifier_pattern = { identifier }

if_expr = { "if" ~ expression ~ expression ~ ("else" ~ (if_expr | expression))? }

block = { "{" ~ expression* ~ "}" }

match_expr = { "match" ~ expression ~ "{" ~ match_arms ~ "}" }

match_arms = { match_arm ~ ("," ~ match_arm)* ~ ","? }
match_arm = {
    match_pattern ~ "=>" ~ expression
}


// MATCH PATTERNS ------------------------------------------------------------

// ENUM =================
match_pattern = {
    wildcard_pattern
    | enum_pattern
    | literal
    | pattern_list
}

enum_pattern = {
    type_identifier ~ pattern_list?
}


variable_list = {
    variable_item ~ ("," ~ variable_item)*
}

variable_item = {
    mut_keyword? ~ identifier
}

pattern_list = {
    (pattern_field | expression) ~
    ("," ~ " "* ~ (pattern_field | expression))*
}  // PEST BUG: need explicit spaces after comma

pattern_field = { identifier | "_" }

wildcard_pattern = { "_" }

// TYPES ------------------------------------------------------------
built_in_type = { "Int" | "Float" | "String" | "Bool" }
optional_type = { type_name ~ "?" }
array_type = { "[" ~ type_name ~ "]" }
map_type = { "[" ~ type_name ~ ":" ~ type_name ~ "]" }
tuple_type = { "(" ~ type_name ~ ("," ~ type_name)* ~ ")" }
struct_type_field = { identifier ~ ":" ~ type_name }

type_name = { base_type ~ optional_marker? }

optional_marker = { "?" }

base_type = {
    built_in_type
    | qualified_type_identifier ~ generic_params?
    | array_type
    | map_type
    | tuple_type
}

generic_params = { "<" ~ type_name ~ ("," ~ " "* ~ type_name)* ~ ">" }  // PEST BUG: need explicit spaces after comma



// LITERALS ------------------------------------------------------------

literal = { tuple_lit | float_lit | int_lit | string_lit | bool_lit | unit_lit | none_lit }


none_lit = { "none" }

int_lit = @{ "-"? ~ ASCII_DIGIT+ }

float_lit = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

string_lit = @{ "\"" ~ ( "\\\"" | !"\"" ~ ANY )* ~ "\"" }

// Interpolated string. Took a while to get this right due to Pest bug not handling space after comma correctly
interpolated_string = ${
    "'" ~ interpolated_content ~ "'"
}

interpolated_content = _{
    (interpolation | text)*
}

interpolation = {
    "{" ~ expression ~ (":" ~ format_specifier)? ~ "}"
}

text = @{
    (!"'" ~ !"{" ~ ANY)+
}

format_specifier = @{
    "?"
  | "x"
  | "X"
  | "b"
  | "f"
  | ".." ~ ASCII_DIGIT+ ~ ("f" | "s")
}

bool_lit = { "true" | "false" }

unit_lit = { "()" }

enum_literal = { qualified_type_identifier ~ "::" ~ type_identifier ~ (struct_fields_lit | tuple_fields)? }

tuple_lit = { "(" ~ expression ~ ("," ~ " "* ~ expression)* ~ ")" }  // PEST BUG: need explicit spaces after comma

struct_fields_lit = { "{" ~ struct_field ~ ("," ~ " "* ~ struct_field)* ~ ","? ~ "}" }  // PEST BUG: need explicit spaces after comma

array_literal = { "[" ~ (expression ~ ("," ~ " "* ~ expression)*)? ~ "]" }  // PEST BUG: need explicit spaces after comma
map_literal = {"[" ~ (map_entry ~ ("," ~ " "* ~ map_entry)*)? ~ "]"}  // PEST BUG: need explicit spaces after comma
map_entry = {
    expression ~ ":" ~ expression
}

struct_fields = { (struct_field ~ ("," ~ " "* ~ struct_field)* ~ trailing_comma? )? }  // PEST BUG: need explicit spaces after comma
struct_field = { identifier ~ ":" ~ expression }

qualified_identifier = {
    module_segments? ~ identifier
}

qualified_type_identifier = {
    module_segments? ~ type_identifier ~ generic_params?
}

module_segments = { (identifier ~ "::")+ }

struct_instantiation = {
    (qualified_type_identifier ~ "{" ~ struct_fields? ~ "}")
    | ("{" ~ struct_fields? ~ "}")  // Anonymous struct, not sure if we want to implement it, since it is a pain to write out.
}

tuple_fields = { "(" ~ expression ~ ("," ~ " "* ~ expression)* ~ ","? ~ ")" }  // PEST BUG: need explicit spaces after comma
