WHITESPACE = _{ space | block_comment | line_comment }

space = _{ " " | "\t" | NEWLINE }
line_comment = _{ "//" ~  (!NEWLINE ~ ANY)* ~ NEWLINE }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

program = { SOI ~ statement* ~ EOI }

doc_comment = @{ "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
type_alias = { "type" ~ type_identifier ~ "=" ~ type_name }

// Separate out definitions
definition = {
    doc_comment* ~
    (import_stmt
    | struct_def
    | enum_def
    | function_def
    | impl_def
    | trait_def
    | type_alias)
}

control_statement = {
    let_statement
    | for_loop
    | while_loop
    | if_stmt
    | return_stmt
    | break_stmt
    | continue_stmt
    | expression_statement
}

// STATEMENTS ------------------------------------------------------------
statement = {
    definition
    | control_statement
}

trait_def = {
    "trait" ~ type_identifier ~ "{" ~ impl_item* ~ "}"
}


impl_def = {
    "impl" ~ type_identifier ~ "{" ~ impl_item* ~ "}"
}


impl_item = { normal_member_function | external_member_function }


// Self parameter can be mut or not
self_parameter = {
    mut_keyword? ~ "self"
}


let_statement = {
    mut_keyword? ~ (struct_destructure | tuple_destructure | identifier) ~ "=" ~ expression
}

// Struct destructuring
struct_destructure = { "{" ~ identifier ~ ("," ~ " "* ~ identifier)* ~ "}" }  // PEST BUG: need explicit spaces after comma

// Tuple destructuring
tuple_destructure = { "(" ~ identifier ~ ("," ~ " "* ~ identifier)* ~ ")" }  // PEST BUG: need explicit spaces after comma

// Struct definition
trailing_comma = _{ "," }


struct_def = { "struct" ~ type_identifier ~ "{" ~ field_definitions? ~ trailing_comma? ~ "}" }

// Update enum rules to handle variants properly
enum_def = { "enum" ~ type_identifier ~ "{" ~ enum_variants? ~ "}" }

enum_variants = { enum_variant ~ ("," ~ enum_variant)* ~ ","? }


enum_variant = {
    struct_variant  // Struct variant must come first
    | tuple_variant  // Then tuple variant
    | simple_variant // Simple variant must come last
}

simple_variant = { type_identifier }
tuple_variant = { type_identifier ~ "(" ~ type_name ~ ("," ~ type_name)* ~ ")" }
struct_variant = { type_identifier ~ "{" ~ struct_type_field ~ ("," ~ struct_type_field)* ~ trailing_comma? ~ "}" }

// Field definitions within a struct
field_definitions = { (field_def ~ ("," ~ field_def)*)? }


// Single field definition
field_def = { identifier ~ ":" ~ type_name }

// Common function signature
function_signature = {
    "fn" ~ identifier ~ "(" ~ (parameter_list ~ ","?)? ~ ")" ~ return_type?
}

// Common member signature (includes self parameter)
member_signature = {
     "fn" ~ identifier ~ "(" ~ (self_parameter ~ ("," ~ parameter_list)? | parameter_list)? ~ ")" ~ return_type?
}

external_function = {
    "external" ~ function_signature
}

normal_function = {
    function_signature ~ stmt_block
}


// Member definitions in impl blocks
member_def = {
    external_member_function |
    normal_member_function
}


external_member_function = {
    "external" ~ member_signature
}

normal_member_function = {
    member_signature ~ stmt_block
}



// Regular function definitions
function_def = {
    external_function |
    normal_function
}

// Parameters
parameter_list = { parameter ~ ("," ~ " "* ~ parameter)* }  // PEST BUG: need explicit spaces after comma

parameter = { mut_keyword? ~ identifier ~ ":" ~ type_name }
mut_keyword = { "mut" }

// Return type
return_type = { "->" ~ type_name }


// Update the for loop rule to use identifier directly instead of loop_vars
for_loop = { "for" ~ identifier ~ "in" ~ expression ~ stmt_block }

// While-loop
while_loop = { "while" ~ expression ~ stmt_block }

// Import statements
import_stmt = {
    "import" ~ (
        import_list_from |  // import { sin, cos } from math
        import_path        // import math or import geometry.shapes
    )
}

import_path = @{ identifier ~ ("." ~ identifier)* }
import_list = { "{" ~ identifier ~ ("," ~ identifier)* ~ "}" }
import_list_from = { import_list ~ "from" ~ import_path }

// Return statement
return_stmt = { "return" ~ expression }


continue_stmt = { "continue" }

// Break statement
break_stmt = { "break" }

// Expression statement (an expression evaluated for its side effects)
expression_statement = { expression }

// Expression is the entry point
expression = { assignment | logical | postfix | prefix }


// This is the base rule for array access
array_subscript = { identifier ~ "[" ~ expression ~ "]" }


assignment = {
    (array_subscript | identifier | field_access) ~
    "=" ~
    expression
}

field_access = { identifier ~ "." ~ identifier }
field_assignment = { field_access ~ "=" ~ expression }

// OPERATORS ------------------------------------------------------------

// Logical operators (lowest precedence)
logical = { comparison ~ ((op_and | op_or) ~ comparison)* }

// Comparison operators
comparison = { addition ~ ((op_eq | op_neq | op_lt | op_gt | op_lte | op_gte) ~ addition)* }

// Addition and subtraction
addition = { multiplication ~ ((op_add | op_sub | range_op) ~ multiplication)* }

// Multiplication and division (highest precedence for binary ops)
multiplication = { postfix ~ ((op_mul | op_div | op_mod) ~ postfix)* }

// Prefix operators
prefix = { prefix_op* ~ primary }
prefix_op = { op_not | op_neg }

postfix = { primary ~ postfix_op* }
postfix_op = { option_operator }
option_operator = { "?" }

// Add range_op to infix operators
infix_op = { range_op | op_or | op_and | op_eq | op_neq | op_lt | op_gt | op_lte | op_gte | op_add | op_sub | op_mul | op_div }

// Define range operator
range_op = { ".." }

// Operator definitions as rules
op_or = { "||" }
op_and = { "&&" }
op_eq = { "==" }
op_neq = { "!=" }
op_lt = { "<" }
op_gt = { ">" }
op_lte = { "<=" }
op_gte = { ">=" }
op_add = { "+" }
op_sub = { "-" }
op_mul = { "*" }
op_div = { "/" }
op_not = { "!" }
op_neg = { "-" }
op_mod = { "%" }


// Basics ----------------------------------------------------------------

identifier = @{
    (ASCII_ALPHA_LOWER | "_") ~
    (ASCII_ALPHA_LOWER | ASCII_DIGIT | "_")* ~
    !(ASCII_ALPHA_UPPER)
}

// Type identifiers must have CamelCase
type_identifier = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }

constant_identifier = @{
    "_"? ~ ASCII_ALPHA_UPPER ~
    (ASCII_ALPHA_UPPER | ASCII_DIGIT | "_")* ~
    !(ASCII_ALPHA_LOWER)
}


// EXPRESSIONS ------------------------------------------------------------
variable = { identifier }

argument_list = { expression ~ ("," ~ " "* ~ expression)* }  // PEST BUG: need explicit spaces after comma
parenthesized = { "(" ~ expression ~ ")" }

function_argument = {
    mut_keyword? ~ expression
}

// Function and member related
function_call = {
    identifier ~ "(" ~ (function_argument ~ ("," ~ " "* ~ function_argument)*)? ~ ")" // PEST BUG: need to be explicit about spaces after ,
}

static_call = { type_identifier ~ "::" ~ identifier ~ "(" ~ (function_argument ~ ("," ~ " "* ~ function_argument)*)? ~ ")" }



member_call = { identifier ~ "(" ~ argument_list? ~ ")" }
member_access_or_call = {
    member_call
    | identifier ~ ("(" ~ argument_list? ~ ")")?
}

array_index = { "[" ~ expression ~ "]" }

// Member chains. These are a bit tricky.
member_chain = {
    (array_literal | variable | function_call | struct_instantiation | literal | parenthesized) ~
    ("." ~ (member_access_or_call | array_index) ~ postfix_op*)+ ~  ("=" ~ expression)? 
}

// Primary expressions with proper float handling
primary = {
    if_expr
    | match_expr
    | interpolated_string
    | member_chain
    | enum_literal
    | static_call
    | function_call
    | struct_instantiation
    | map_literal
    | parenthesized
    | literal ~ ("." ~ member_access_or_call)*
    | array_literal
    | array_subscript
    | variable
}



identifier_pattern = { identifier }

// If expression
if_expr = { "if" ~ expression ~ block ~ "else" ~ block } // when used as an expression, the else part is mandatory

// If statement has an optional `else`
if_stmt = {
    "if" ~ expression ~ stmt_block ~
    ("else" ~ (if_stmt | stmt_block))?
}

// Blocks
stmt_block = { "{" ~ statement* ~ "}" } // Only for a small part of the language, for function definition and while and for loops.
block = { "{" ~ expression ~ "}" } // This should be the most common one
match_block = { "{" ~ statement* ~ expression? ~ "}" } // Match blocks can be a single expression. might be cool to try to have this for a normal block as well.

// Match expression
match_expr = { "match" ~ expression ~ "{" ~ match_arms ~ "}" }

match_arms = { match_arm ~ ("," ~ match_arm)* ~ ","? }
match_arm = {
    match_pattern ~ "=>" ~ (match_block | expression)
}


// MATCH PATTERNS ------------------------------------------------------------

// ENUM =================
match_pattern = {
    wildcard_pattern
    | enum_pattern
    | literal
    | tuple_pattern
    | struct_pattern
    | identifier_pattern
}

enum_pattern = {
    type_identifier ~ (
        enum_pattern_tuple
        | enum_pattern_struct
    )?
}

enum_pattern_tuple = {
    "(" ~ pattern_field ~ ("," ~ " "* ~ pattern_field)* ~ ")"  // PEST BUG: need explicit spaces after comma
}

enum_pattern_struct = {
    "{" ~ struct_pattern_field ~ ("," ~ " "* ~ struct_pattern_field)* ~ "}"  // PEST BUG: need explicit spaces after comma
}

// OTHER
struct_pattern_field = { identifier }  // For struct patterns, we only need identifiers
pattern_field = { identifier | "_" }

tuple_pattern = {
    "(" ~ pattern_field ~ ("," ~ pattern_field)* ~ ")"
}

struct_pattern = { "{" ~ pattern_field ~ ("," ~ pattern_field)* ~ "}" }
wildcard_pattern = { "_" }




// TYPES ------------------------------------------------------------
built_in_type = { "Int" | "Float" | "String" | "Bool" }
optional_type = { type_name ~ "?" }
array_type = { "[" ~ type_name ~ "]" }
map_type = { "[" ~ type_name ~ ":" ~ type_name ~ "]" }
tuple_type = { "(" ~ type_name ~ ("," ~ type_name)* ~ ")" }
struct_type_field = { identifier ~ ":" ~ type_name }

type_name = { base_type ~ optional_marker? }

optional_marker = { "?" }

// This is used to refer to a specific type, not used in type definitions
base_type = {
    built_in_type
    | qualified_type_identifier
    | array_type
    | map_type
    | tuple_type
}




// LITERALS ------------------------------------------------------------

literal = { tuple_lit | float_lit | int_lit | string_lit | bool_lit | unit_lit | none_lit }


none_lit = { "none" }

// Integer literal
int_lit = @{ "-"? ~ ASCII_DIGIT+ }

// Floating-point literal
float_lit = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

// String literal
string_lit = @{ "\"" ~ ( "\\\"" | !"\"" ~ ANY )* ~ "\"" }

// Interpolated string. Took a while to get this right due to Pest bug not handling space after comma correctly
interpolated_string = ${
    "'" ~ interpolated_content ~ "'"
}

interpolated_content = _{
    (interpolation | text)*
}

interpolation = {
    "{" ~ expression ~ (":" ~ format_specifier)? ~ "}"
}

text = @{
    (!"'" ~ !"{" ~ ANY)+
}

format_specifier = @{
    "?"
  | "x"
  | "X"
  | "b"
  | "f"
  | ".." ~ ASCII_DIGIT+ ~ ("f" | "s")
}

// Boolean literal
bool_lit = { "true" | "false" }

unit_lit = { "()" }

enum_literal = { qualified_type_identifier ~ "::" ~ type_identifier ~ (struct_fields_lit | tuple_fields)? }

// Add tuple literal definition
tuple_lit = { "(" ~ expression ~ ("," ~ " "* ~ expression)* ~ ")" }  // PEST BUG: need explicit spaces after comma

// Similar to struct_fields
struct_fields_lit = { "{" ~ struct_field ~ ("," ~ " "* ~ struct_field)* ~ ","? ~ "}" }  // PEST BUG: need explicit spaces after comma

// Array and map literals
array_literal = { "[" ~ (expression ~ ("," ~ " "* ~ expression)*)? ~ "]" }  // PEST BUG: need explicit spaces after comma
map_literal = {"[" ~ (map_entry ~ ("," ~ " "* ~ map_entry)*)? ~ "]"}  // PEST BUG: need explicit spaces after comma
map_entry = {
    expression ~ ":" ~ expression
}
// Struct related
// Similar to struct_fields_lit
struct_fields = { (struct_field ~ ("," ~ " "* ~ struct_field)* ~ trailing_comma? )? }  // PEST BUG: need explicit spaces after comma
struct_field = { identifier ~ ":" ~ expression }

qualified_identifier = {
    module_path? ~ identifier
}

qualified_type_identifier = { module_path? ~ type_identifier }
module_path = { module_segment+ }
module_segment = { identifier ~ "::" }

struct_instantiation = {
    (qualified_type_identifier ~ "{" ~ struct_fields? ~ "}")
    | ("{" ~ struct_fields? ~ "}")  // Anonymous struct, not sure if we want to implement it, since it is a pain to write out.
}

tuple_fields = { "(" ~ expression ~ ("," ~ " "* ~ expression)* ~ ","? ~ ")" }  // PEST BUG: need explicit spaces after comma
